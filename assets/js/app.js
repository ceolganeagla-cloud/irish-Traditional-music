
let STATE = {tunes:[], currentIndex:0, synth:null, visualObj:null, isPlaying:false, selectedInstrument:"violin",
             audioCtx:null, analyser:null, micStream:null, tsBuffer:null, tsSource:null};
const $=(s,e=document)=>e.querySelector(s); const $$=(s,e=document)=>[...e.querySelectorAll(s)];
function setTab(id){ $$(".nav button").forEach(b=>b.classList.toggle("active",b.dataset.target===id));
  $$(".section").forEach(s=>s.classList.toggle("active",s.id===id)); }
function bindNav(){ $$(".nav button").forEach(btn=>btn.addEventListener("click",()=>setTab(btn.dataset.target))); setTab("book"); }
async function init(){ bindNav(); await ensureAbc(); await loadLibrary(); buildLibrary(); loadFromIndex(0); setupStudio(); setupSearch(); setupWhistle(); setupTranscribe(); }
function loadScript(src){ return new Promise((res,rej)=>{ const s=document.createElement("script"); s.src=src; s.async=true; s.onload=res; s.onerror=()=>rej(new Error("fail "+src)); document.head.appendChild(s); }); }
async function ensureAbc(){ if(window.ABCJS) return; try{ await loadScript("assets/vendor/abcjs/abcjs-min.js"); if(window.ABCJS) return;}catch{} await loadScript("https://cdn.jsdelivr.net/npm/abcjs@6.4.3/dist/abcjs-min.js"); }
async function loadLibrary(){ try{ const r=await fetch("data/tunes.json",{cache:"no-store"}); const d=await r.json(); STATE.tunes=d.tunes||[]; }catch{ STATE.tunes=[]; } }
function buildLibrary(list=STATE.tunes){ const wrap=$("#libraryList"); wrap.innerHTML="";
  list.forEach((t,i)=>{ const el=document.createElement("div"); el.className="item"; el.innerHTML=`<div><strong>${t.title}</strong><div class="small">${t.type||""}</div></div><div class="controls"><button class="btn smallBtn">Open</button></div>`; el.querySelector("button").addEventListener("click",()=>{loadFromIndex(i); setTab("book");}); wrap.appendChild(el); });
  $("#searchLib").addEventListener("input", e=>{ const q=e.target.value.toLowerCase(); buildLibrary(STATE.tunes.filter(t=>(t.title+" "+(t.type||"")).toLowerCase().includes(q))); });
  $("#exportLib").addEventListener("click", ()=>{ const blob=new Blob([JSON.stringify({tunes:STATE.tunes},null,2)],{type:"application/json"}); const a=document.createElement("a"); a.href=URL.createObjectURL(blob); a.download="tunes.json"; a.click(); });
}
function loadFromIndex(i){ if(i<0||i>=STATE.tunes.length) return; STATE.currentIndex=i; const t=STATE.tunes[i]; $("#pageTitle").textContent=t.title||""; $("#pageType").textContent=t.type||""; $("#pagePos").textContent=`${i+1} / ${STATE.tunes.length}`; $("#abcSource").textContent=t.abc||""; renderABC(t.abc||""); }
function renderABC(abc){ const out=$("#abcOut"); out.innerHTML=""; try{ const v=ABCJS.renderAbc(out, abc, {responsive:"resize", viewportHorizontal:true}); STATE.visualObj=v && v[0]? v[0]:null; }catch(e){ out.innerHTML="<div class='item'>ABC parse error.</div>"; } }
$("#prevBtn")?.addEventListener("click",()=>loadFromIndex(Math.max(0,STATE.currentIndex-1))); $("#nextBtn")?.addEventListener("click",()=>loadFromIndex(Math.min(STATE.tunes.length-1,STATE.currentIndex+1)));
$("#instrument")?.addEventListener("change",e=>STATE.selectedInstrument=e.target.value);
$("#playBtn")?.addEventListener("click", playPause); $("#stopBtn")?.addEventListener("click", stopPlay);
async function playPause(){ if(STATE.isPlaying){ stopPlay(); return;} if(!STATE.visualObj) return; if(!STATE.synth) STATE.synth=new ABCJS.synth.CreateSynth(); const ctx=new (window.AudioContext||window.webkitAudioContext)(); await ctx.resume(); await STATE.synth.init({audioContext:ctx, visualObj:STATE.visualObj}); const ctrl=new ABCJS.synth.SynthController(); ctrl.load("#synthCtrl",null,{displayPlay:false,displayProgress:true}); await STATE.synth.prime(); const map={violin:40,mandolin:25,accordion:22}; STATE.synth.setProgram(map[STATE.selectedInstrument]||40); STATE.isPlaying=true; $("#playBtn").disabled=true; $("#stopBtn").disabled=false; try{ await STATE.synth.start(); } finally{ STATE.isPlaying=false; $("#playBtn").disabled=false; $("#stopBtn").disabled=true; } }
function stopPlay(){ try{ STATE.synth?.stop(); }catch{} STATE.isPlaying=false; $("#playBtn").disabled=false; $("#stopBtn").disabled=true; }
function setupStudio(){ $("#abcInput").addEventListener("input",()=>renderPreview($("#abcInput").value)); $("#applyAbc").addEventListener("click",()=>{ const title=($("#abcTitle").value||"Untitled").trim(); const type=($("#abcType").value||"Tune").trim(); const abc=($("#abcInput").value||"").trim(); if(!abc) return; STATE.tunes.push({id:Date.now().toString(36), title, type, abc}); buildLibrary(); loadFromIndex(STATE.tunes.length-1); setTab("book"); }); $("#importAbc").addEventListener("click", async()=>{ const f=$("#abcFile").files?.[0]; if(!f) return; const text=await f.text(); $("#abcInput").value=text; renderPreview(text); }); }
function renderPreview(abc){ const out=$("#abcPreview"); out.innerHTML=""; try{ ABCJS.renderAbc(out, abc||"X:1\nT:Preview\nK:C\nCDEF GABc|",{responsive:"resize", viewportHorizontal:true}); }catch{} }
function setupSearch(){ $("#doSearch").addEventListener("click",()=>{ const q=($("#q").value||"").toLowerCase(); const list=STATE.tunes.filter(t=>(t.title+" "+(t.type||"")+(t.abc||"")).toLowerCase().includes(q)); showResults(list); }); $("#importJson").addEventListener("click", async()=>{ const f=$("#jsonFile").files?.[0]; if(!f) return; const json=JSON.parse(await f.text()); if(Array.isArray(json.tunes)) STATE.tunes=json.tunes.concat(STATE.tunes); buildLibrary(); showResults(json.tunes||[]); }); }
function showResults(list){ const box=$("#searchResults"); box.innerHTML=""; if(!list.length){ box.innerHTML="<div class='item'>No matches.</div>"; return;} list.forEach(t=>{ const el=document.createElement("div"); el.className="item"; el.innerHTML=`<div><strong>${t.title}</strong><div class="small">${t.type||""}</div></div><div class='controls'><button class='btn smallBtn'>Open</button></div>`; el.querySelector("button").addEventListener("click",()=>{ const idx=STATE.tunes.findIndex(x=>x.id===t.id); if(idx>=0){ loadFromIndex(idx); setTab("book"); } }); box.appendChild(el); }); }
function setupWhistle(){ $("#micStart").addEventListener("click", startMic); $("#micStop").addEventListener("click", stopMic); }
async function startMic(){ try{ const ctx=new (window.AudioContext||window.webkitAudioContext)(); STATE.audioCtx=ctx; const stream=await navigator.mediaDevices.getUserMedia({audio:true}); STATE.micStream=stream; const src=ctx.createMediaStreamSource(stream); const analyser=ctx.createAnalyser(); analyser.fftSize=2048; src.connect(analyser); STATE.analyser=analyser; drawWave(); detectLoop(); $("#micStart").disabled=true; $("#micStop").disabled=false; }catch(e){ alert("Mic error: "+e.message);} }
function stopMic(){ STATE.micStream?.getTracks().forEach(t=>t.stop()); STATE.micStream=null; STATE.analyser=null; $("#micStart").disabled=false; $("#micStop").disabled=true; }
function drawWave(){ if(!STATE.analyser) return; const cvs=$("#wave"), c=cvs.getContext("2d"); cvs.width=cvs.clientWidth; cvs.height=cvs.clientHeight; const data=new Uint8Array(STATE.analyser.fftSize); (function loop(){ if(!STATE.analyser) return; requestAnimationFrame(loop); STATE.analyser.getByteTimeDomainData(data); c.clearRect(0,0,cvs.width,cvs.height); c.strokeStyle="#2dbd6e"; c.beginPath(); for(let i=0;i<data.length;i++){ const x=i/data.length*cvs.width; const y=(data[i]/255)*cvs.height; if(i===0) c.moveTo(x,y); else c.lineTo(x,y);} c.stroke(); })(); }
const NOTE_NAMES=["C","C#","D","Eb","E","F","F#","G","Ab","A","Bb","B"];
function freqToNoteName(f){ if(!f||!isFinite(f)) return null; const n=Math.round(12*(Math.log2(f/440)))+69; return NOTE_NAMES[(n+1200)%12]; }
function autoCorrelate(buf, sr){ const SIZE=buf.length; const MAX=Math.floor(SIZE/2); let best=-1,bi=-1; for(let i=8;i<MAX;i++){ let sum=0; for(let j=0;j<MAX;j++) sum+=buf[j]*buf[j+i]; if(sum>best){best=sum;bi=i;} } if(bi===-1) return null; return sr/bi; }
let DETECTED=[];
function detectLoop(){ if(!STATE.analyser) return; const sr=STATE.audioCtx.sampleRate; const buf=new Float32Array(STATE.analyser.fftSize); (function step(){ if(!STATE.analyser) return; requestAnimationFrame(step); STATE.analyser.getFloatTimeDomainData(buf); const f=autoCorrelate(buf,sr); const n=freqToNoteName(f); if(n){ const last=DETECTED[DETECTED.length-1]; if(last!==n){ DETECTED.push(n); if(DETECTED.length>32) DETECTED.shift(); $("#detectedNotes").textContent=DETECTED.join(" "); matchDetected(); } } })(); }
function abcToPitchSeq(abc){ const m=abc.match(/[A-Ga-g]/g)||[]; return m.map(ch=>ch.toUpperCase()); }
function matchDetected(){ const seq=DETECTED.slice(-12); if(seq.length<4) return; const scores=STATE.tunes.map(t=>{ const p=abcToPitchSeq(t.abc); let best=0; for(let i=0;i<p.length-seq.length;i++){ let s=0; for(let j=0;j<seq.length;j++) if(p[i+j]===seq[j]) s++; if(s>best) best=s; } return {t,score:best}; }).sort((a,b)=>b.score-a.score).slice(0,5); const list=$("#matchList"); list.innerHTML=""; scores.forEach(({t,score})=>{ const el=document.createElement("div"); el.className="item"; el.innerHTML=`<div><strong>${t.title}</strong><div class="small">match ${score}</div></div><div class='controls'><button class='btn smallBtn'>Open</button></div>`; el.querySelector("button").addEventListener("click",()=>{ const idx=STATE.tunes.findIndex(x=>x.id===t.id); loadFromIndex(idx); setTab("book"); }); list.appendChild(el); }); }
function setupTranscribe(){ const f=$("#audioFile"); f.addEventListener("change", async()=>{ const file=f.files?.[0]; if(!file) return; const arr=await file.arrayBuffer(); const ctx=new (window.AudioContext||window.webkitAudioContext)(); STATE.audioCtx=ctx; STATE.tsBuffer=await ctx.decodeAudioData(arr); $("#audioPlay").disabled=false; $("#audioPause").disabled=false; drawTsWave(STATE.tsBuffer); }); $("#audioPlay").addEventListener("click",()=>{ if(!STATE.tsBuffer) return; if(STATE.tsSource) STATE.tsSource.stop(); const src=STATE.audioCtx.createBufferSource(); src.buffer=STATE.tsBuffer; src.playbackRate.value=parseFloat($("#rate").value)||1; const semi=parseInt($("#detune").value)||0; if(src.detune) src.detune.value=semi*100; src.connect(STATE.audioCtx.destination); const a=parseFloat($("#loopA").value)||0; const b=parseFloat($("#loopB").value)||0; if(b>a && b<=STATE.tsBuffer.duration){ src.loop=true; src.loopStart=a; src.loopEnd=b; src.start(0,a);} else src.start(); STATE.tsSource=src; }); $("#audioPause").addEventListener("click",()=>{ try{ STATE.tsSource?.stop(); }catch{} }); $("#clearLoop").addEventListener("click",()=>{ $("#loopA").value=0; $("#loopB").value=0; }); }
function drawTsWave(buf){ const cvs=$("#tsWave"), c=cvs.getContext("2d"); cvs.width=cvs.clientWidth; cvs.height=cvs.clientHeight; const data=buf.getChannelData(0); const step=Math.ceil(data.length/cvs.width); c.clearRect(0,0,cvs.width,cvs.height); c.beginPath(); c.strokeStyle="#2dbd6e"; for(let i=0;i<cvs.width;i++){ let min=1e9,max=-1e9; for(let j=0;j<step;j++){ const v=data[(i*step)+j]||0; if(v<min)min=v; if(v>max)max=v; } const y1=(1-min)*cvs.height/2, y2=(1-max)*cvs.height/2; c.moveTo(i,y1); c.lineTo(i,y2);} c.stroke(); }
$("#pdfOpen")?.addEventListener("click",()=>{ const url=$("#pdfUrl").value.trim(); if(url) $("#pdfFrame").src=url; });
window.addEventListener("load", init);
